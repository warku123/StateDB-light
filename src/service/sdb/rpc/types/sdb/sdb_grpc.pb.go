// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc/sdb.proto

package sdb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Sdb_Suicide_FullMethodName = "/sdb.Sdb/Suicide"
)

// SdbClient is the client API for Sdb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SdbClient interface {
	Suicide(ctx context.Context, in *SuicideRequest, opts ...grpc.CallOption) (*SuicideResponse, error)
}

type sdbClient struct {
	cc grpc.ClientConnInterface
}

func NewSdbClient(cc grpc.ClientConnInterface) SdbClient {
	return &sdbClient{cc}
}

func (c *sdbClient) Suicide(ctx context.Context, in *SuicideRequest, opts ...grpc.CallOption) (*SuicideResponse, error) {
	out := new(SuicideResponse)
	err := c.cc.Invoke(ctx, Sdb_Suicide_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SdbServer is the server API for Sdb service.
// All implementations must embed UnimplementedSdbServer
// for forward compatibility
type SdbServer interface {
	Suicide(context.Context, *SuicideRequest) (*SuicideResponse, error)
	mustEmbedUnimplementedSdbServer()
}

// UnimplementedSdbServer must be embedded to have forward compatible implementations.
type UnimplementedSdbServer struct {
}

func (UnimplementedSdbServer) Suicide(context.Context, *SuicideRequest) (*SuicideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suicide not implemented")
}
func (UnimplementedSdbServer) mustEmbedUnimplementedSdbServer() {}

// UnsafeSdbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SdbServer will
// result in compilation errors.
type UnsafeSdbServer interface {
	mustEmbedUnimplementedSdbServer()
}

func RegisterSdbServer(s grpc.ServiceRegistrar, srv SdbServer) {
	s.RegisterService(&Sdb_ServiceDesc, srv)
}

func _Sdb_Suicide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuicideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).Suicide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_Suicide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).Suicide(ctx, req.(*SuicideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sdb_ServiceDesc is the grpc.ServiceDesc for Sdb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sdb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdb.Sdb",
	HandlerType: (*SdbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Suicide",
			Handler:    _Sdb_Suicide_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sdb.proto",
}
