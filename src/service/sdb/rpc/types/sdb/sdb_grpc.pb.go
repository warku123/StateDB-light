// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: rpc/sdb.proto

package sdb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Sdb_CreateAccount_FullMethodName = "/sdb.Sdb/CreateAccount"
	Sdb_SubBalance_FullMethodName    = "/sdb.Sdb/SubBalance"
	Sdb_AddBalance_FullMethodName    = "/sdb.Sdb/AddBalance"
	Sdb_GetBalance_FullMethodName    = "/sdb.Sdb/GetBalance"
	Sdb_Suicide_FullMethodName       = "/sdb.Sdb/Suicide"
	Sdb_GetNonce_FullMethodName      = "/sdb.Sdb/GetNonce"
	Sdb_SetNonce_FullMethodName      = "/sdb.Sdb/SetNonce"
)

// SdbClient is the client API for Sdb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SdbClient interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	SubBalance(ctx context.Context, in *SubBalanceRequest, opts ...grpc.CallOption) (*SubBalanceResponse, error)
	AddBalance(ctx context.Context, in *AddBalanceRequest, opts ...grpc.CallOption) (*AddBalanceResponse, error)
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	Suicide(ctx context.Context, in *SuicideRequest, opts ...grpc.CallOption) (*SuicideResponse, error)
	GetNonce(ctx context.Context, in *GetNonceRequest, opts ...grpc.CallOption) (*GetNonceResponse, error)
	SetNonce(ctx context.Context, in *SetNonceRequest, opts ...grpc.CallOption) (*SetNonceResponse, error)
}

type sdbClient struct {
	cc grpc.ClientConnInterface
}

func NewSdbClient(cc grpc.ClientConnInterface) SdbClient {
	return &sdbClient{cc}
}

func (c *sdbClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, Sdb_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) SubBalance(ctx context.Context, in *SubBalanceRequest, opts ...grpc.CallOption) (*SubBalanceResponse, error) {
	out := new(SubBalanceResponse)
	err := c.cc.Invoke(ctx, Sdb_SubBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) AddBalance(ctx context.Context, in *AddBalanceRequest, opts ...grpc.CallOption) (*AddBalanceResponse, error) {
	out := new(AddBalanceResponse)
	err := c.cc.Invoke(ctx, Sdb_AddBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, Sdb_GetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) Suicide(ctx context.Context, in *SuicideRequest, opts ...grpc.CallOption) (*SuicideResponse, error) {
	out := new(SuicideResponse)
	err := c.cc.Invoke(ctx, Sdb_Suicide_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) GetNonce(ctx context.Context, in *GetNonceRequest, opts ...grpc.CallOption) (*GetNonceResponse, error) {
	out := new(GetNonceResponse)
	err := c.cc.Invoke(ctx, Sdb_GetNonce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdbClient) SetNonce(ctx context.Context, in *SetNonceRequest, opts ...grpc.CallOption) (*SetNonceResponse, error) {
	out := new(SetNonceResponse)
	err := c.cc.Invoke(ctx, Sdb_SetNonce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SdbServer is the server API for Sdb service.
// All implementations must embed UnimplementedSdbServer
// for forward compatibility
type SdbServer interface {
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	SubBalance(context.Context, *SubBalanceRequest) (*SubBalanceResponse, error)
	AddBalance(context.Context, *AddBalanceRequest) (*AddBalanceResponse, error)
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	Suicide(context.Context, *SuicideRequest) (*SuicideResponse, error)
	GetNonce(context.Context, *GetNonceRequest) (*GetNonceResponse, error)
	SetNonce(context.Context, *SetNonceRequest) (*SetNonceResponse, error)
	mustEmbedUnimplementedSdbServer()
}

// UnimplementedSdbServer must be embedded to have forward compatible implementations.
type UnimplementedSdbServer struct {
}

func (UnimplementedSdbServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedSdbServer) SubBalance(context.Context, *SubBalanceRequest) (*SubBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubBalance not implemented")
}
func (UnimplementedSdbServer) AddBalance(context.Context, *AddBalanceRequest) (*AddBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBalance not implemented")
}
func (UnimplementedSdbServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedSdbServer) Suicide(context.Context, *SuicideRequest) (*SuicideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Suicide not implemented")
}
func (UnimplementedSdbServer) GetNonce(context.Context, *GetNonceRequest) (*GetNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNonce not implemented")
}
func (UnimplementedSdbServer) SetNonce(context.Context, *SetNonceRequest) (*SetNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNonce not implemented")
}
func (UnimplementedSdbServer) mustEmbedUnimplementedSdbServer() {}

// UnsafeSdbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SdbServer will
// result in compilation errors.
type UnsafeSdbServer interface {
	mustEmbedUnimplementedSdbServer()
}

func RegisterSdbServer(s grpc.ServiceRegistrar, srv SdbServer) {
	s.RegisterService(&Sdb_ServiceDesc, srv)
}

func _Sdb_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_SubBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).SubBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_SubBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).SubBalance(ctx, req.(*SubBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_AddBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).AddBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_AddBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).AddBalance(ctx, req.(*AddBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_Suicide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuicideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).Suicide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_Suicide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).Suicide(ctx, req.(*SuicideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_GetNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).GetNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_GetNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).GetNonce(ctx, req.(*GetNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sdb_SetNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdbServer).SetNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sdb_SetNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdbServer).SetNonce(ctx, req.(*SetNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sdb_ServiceDesc is the grpc.ServiceDesc for Sdb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sdb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdb.Sdb",
	HandlerType: (*SdbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _Sdb_CreateAccount_Handler,
		},
		{
			MethodName: "SubBalance",
			Handler:    _Sdb_SubBalance_Handler,
		},
		{
			MethodName: "AddBalance",
			Handler:    _Sdb_AddBalance_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Sdb_GetBalance_Handler,
		},
		{
			MethodName: "Suicide",
			Handler:    _Sdb_Suicide_Handler,
		},
		{
			MethodName: "GetNonce",
			Handler:    _Sdb_GetNonce_Handler,
		},
		{
			MethodName: "SetNonce",
			Handler:    _Sdb_SetNonce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/sdb.proto",
}
