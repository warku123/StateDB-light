// Code generated by goctl. DO NOT EDIT.
// Source: sdb.proto

package server

import (
	"context"

	"statedbl/service/sdb/rpc/internal/logic"
	"statedbl/service/sdb/rpc/internal/svc"
	"statedbl/service/sdb/rpc/types/sdb"
)

type SdbServer struct {
	svcCtx *svc.ServiceContext
	sdb.UnimplementedSdbServer
}

func NewSdbServer(svcCtx *svc.ServiceContext) *SdbServer {
	return &SdbServer{
		svcCtx: svcCtx,
	}
}

func (s *SdbServer) CreateAccount(ctx context.Context, in *sdb.CreateAccountRequest) (*sdb.CreateAccountResponse, error) {
	l := logic.NewCreateAccountLogic(ctx, s.svcCtx)
	return l.CreateAccount(in)
}

func (s *SdbServer) SubBalance(ctx context.Context, in *sdb.SubBalanceRequest) (*sdb.SubBalanceResponse, error) {
	l := logic.NewSubBalanceLogic(ctx, s.svcCtx)
	return l.SubBalance(in)
}

func (s *SdbServer) AddBalance(ctx context.Context, in *sdb.AddBalanceRequest) (*sdb.AddBalanceResponse, error) {
	l := logic.NewAddBalanceLogic(ctx, s.svcCtx)
	return l.AddBalance(in)
}

func (s *SdbServer) GetBalance(ctx context.Context, in *sdb.GetBalanceRequest) (*sdb.GetBalanceResponse, error) {
	l := logic.NewGetBalanceLogic(ctx, s.svcCtx)
	return l.GetBalance(in)
}

func (s *SdbServer) Suicide(ctx context.Context, in *sdb.SuicideRequest) (*sdb.SuicideResponse, error) {
	l := logic.NewSuicideLogic(ctx, s.svcCtx)
	return l.Suicide(in)
}

func (s *SdbServer) HasSuicided(ctx context.Context, in *sdb.HasSuicidedRequest) (*sdb.HasSuicidedResponse, error) {
	l := logic.NewHasSuicidedLogic(ctx, s.svcCtx)
	return l.HasSuicided(in)
}

func (s *SdbServer) GetNonce(ctx context.Context, in *sdb.GetNonceRequest) (*sdb.GetNonceResponse, error) {
	l := logic.NewGetNonceLogic(ctx, s.svcCtx)
	return l.GetNonce(in)
}

func (s *SdbServer) SetNonce(ctx context.Context, in *sdb.SetNonceRequest) (*sdb.SetNonceResponse, error) {
	l := logic.NewSetNonceLogic(ctx, s.svcCtx)
	return l.SetNonce(in)
}

func (s *SdbServer) GetCodeHash(ctx context.Context, in *sdb.GetCodeHashRequest) (*sdb.GetCodeHashResponse, error) {
	l := logic.NewGetCodeHashLogic(ctx, s.svcCtx)
	return l.GetCodeHash(in)
}

func (s *SdbServer) GetCode(ctx context.Context, in *sdb.GetCodeRequest) (*sdb.GetCodeResponse, error) {
	l := logic.NewGetCodeLogic(ctx, s.svcCtx)
	return l.GetCode(in)
}

func (s *SdbServer) SetCode(ctx context.Context, in *sdb.SetCodeRequest) (*sdb.SetCodeResponse, error) {
	l := logic.NewSetCodeLogic(ctx, s.svcCtx)
	return l.SetCode(in)
}

func (s *SdbServer) GetCodeSize(ctx context.Context, in *sdb.GetCodeSizeRequest) (*sdb.GetCodeSizeResponse, error) {
	l := logic.NewGetCodeSizeLogic(ctx, s.svcCtx)
	return l.GetCodeSize(in)
}

func (s *SdbServer) AddRefund(ctx context.Context, in *sdb.AddRefundRequest) (*sdb.AddRefundResponse, error) {
	l := logic.NewAddRefundLogic(ctx, s.svcCtx)
	return l.AddRefund(in)
}

func (s *SdbServer) SubRefund(ctx context.Context, in *sdb.SubRefundRequest) (*sdb.SubRefundResponse, error) {
	l := logic.NewSubRefundLogic(ctx, s.svcCtx)
	return l.SubRefund(in)
}

func (s *SdbServer) GetRefund(ctx context.Context, in *sdb.GetRefundRequest) (*sdb.GetRefundResponse, error) {
	l := logic.NewGetRefundLogic(ctx, s.svcCtx)
	return l.GetRefund(in)
}

func (s *SdbServer) GetTransientState(ctx context.Context, in *sdb.GetTransientStateRequest) (*sdb.GetTransientStateResponse, error) {
	l := logic.NewGetTransientStateLogic(ctx, s.svcCtx)
	return l.GetTransientState(in)
}

func (s *SdbServer) SetTransientState(ctx context.Context, in *sdb.SetTransientStateRequest) (*sdb.SetTransientStateResponse, error) {
	l := logic.NewSetTransientStateLogic(ctx, s.svcCtx)
	return l.SetTransientState(in)
}
